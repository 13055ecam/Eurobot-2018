<launch>
    <arg name="team" default="unknown" />
    <arg name="simulate_motors" default="false" />
    <arg name="raspberry" default="false" />
    <arg name="viz" default="false" />
    <arg name="model" default="$(find robot_description)/urdf/cortex.xacro"/>
    <arg name="rvizconfig" default="$(find mecanum)/rviz/robot.rviz" />

    <!-- Robot description -->
    <rosparam command="load" file="$(find robot_2018)/param/mecanum.yaml" />
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)" />

    <!-- Navigation -->
    <include file="$(find navigation)/launch/move_base.launch" />

    <!-- Strategy -->
    <include file="$(find strategy)/launch/startup_conf.launch">
        <arg name="raspberry" value="$(arg raspberry)" />
        <arg name="team" value="$(arg team)" />
    </include>

    <include file="$(find strategy)/launch/cortex_strategy.launch" />

    <!-- Motion -->
    <node name="mecanum" pkg="mecanum" type="mecanum.py" />
    <node name="encoder_odom" pkg="mecanum" type="encoder_odom.py" output="screen" />
    <node name="encoder_joint_state" pkg="mecanum" type="encoder_joint_state.py" />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    <!-- Serial -->
    <node unless="$(arg simulate_motors)" name="serial_motors" pkg="rosserial_python" type="serial_node.py">
        <param name="port" value="/dev/ttyACM0"/>
        <param name="baud" value="57600" />
        <remap from="mecanum/encoder/reset" to="reset" />
        <remap from="mecanum/encoder" to="arduino/encoder" />
    </node>
    <node name="correct_encoders" pkg="mecanum" type="encoder_correct.py" />

    <!-- Simulation -->
    <group if="$(arg simulate_motors)">
        <node name="motor_sim" pkg="mecanum" type="motor_sim.py" />
    </group>

    <!-- Visualization -->
    <group if="$(arg viz)">
        <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />
    </group>
</launch>